{"remainingRequest":"F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\个人git项目\\squirrel-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\个人git项目\\squirrel-admin\\src\\views\\file\\FileList.vue?vue&type=template&id=0e38b163&scoped=true&","dependencies":[{"path":"F:\\个人git项目\\squirrel-admin\\src\\views\\file\\FileList.vue","mtime":1586531327967},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImEtY2FyZCIsCiAgICB7IGF0dHJzOiB7IGJvcmRlcmVkOiBmYWxzZSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZS1wYWdlLXNlYXJjaC13cmFwcGVyIG9wZXJhdG9yIiB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZpbGUtcGF0aC10b29scyIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJhLWJ1dHRvbiIsIHsKICAgICAgICAgICAgICAgIGNsYXNzOiB7IGRpc2FibGU6IF92bS5kaXJlY3RvcnlDdXJzb3IgPT0gMCB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc2hhcGU6ICJjaXJjbGUiLCBpY29uOiAiYXJyb3ctbGVmdCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm5leHRPclByZXZpb3VzKHRydWUsIGZhbHNlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImEtYnV0dG9uIiwgewogICAgICAgICAgICAgICAgY2xhc3M6IHsgZGlzYWJsZTogX3ZtLnBhcmVudFBhdGggPT0gbnVsbCB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc2hhcGU6ICJjaXJjbGUiLCBpY29uOiAiYXJyb3ctdXAiIH0sCiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvUGFyZW50UGF0aCB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImEtYnV0dG9uIiwgewogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGlzYWJsZToKICAgICAgICAgICAgICAgICAgICBfdm0uZGlyZWN0b3J5Q3Vyc29yICsgMSA+PSBfdm0uZGlyZWN0b3J5SGlzdG9yeS5sZW5ndGgKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBzaGFwZTogImNpcmNsZSIsIGljb246ICJhcnJvdy1yaWdodCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm5leHRPclByZXZpb3VzKGZhbHNlLCB0cnVlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImEtYnV0dG9uIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgc2hhcGU6ICJjaXJjbGUiLCBpY29uOiAicmVkbyIsIGxvYWRpbmc6IF92bS5sb2FkaW5nIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5nZXREYXRhU291cmNlKAogICAgICAgICAgICAgICAgICAgICAgX3ZtLmRpcmVjdG9yeUhpc3RvcnlbX3ZtLmRpcmVjdG9yeUN1cnNvcl0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhLWJyZWFkY3J1bWIiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmlsZS1wYXRoIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImEtYnJlYWRjcnVtYi1pdGVtIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmdldERhdGFTb3VyY2UoInJvb3QiKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigi5Li755uu5b2VIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wYXRocywgZnVuY3Rpb24ocGF0aCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgImEtYnJlYWRjcnVtYi1pdGVtIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluZGV4ID4gMCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImluZGV4ID4gMCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlQnJlYWRjcnVtYihpbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhwYXRoKSldCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFibGUtb3BlcmF0b3Igb3BlcmF0b3IgZmlsZS1vcGVyYXRvciIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEtYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJ1cGxvYWQiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgX3ZtLnVwbG9hZFZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCLkuIrkvKAiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEtYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJmb2xkZXItYWRkIiB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIDsoX3ZtLnJlbmFtZVZpc2libGUgPSB0cnVlKSwgKF92bS5jYWNoZVJlY29yZCA9IHt9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigi5paH5Lu25aS5IildCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhLWRyb3Bkb3duIiwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtbWVudSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHNsb3Q6ICJvdmVybGF5IiB9LCBzbG90OiAib3ZlcmxheSIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEtbWVudS1pdGVtIiwKICAgICAgICAgICAgICAgICAgICB7IGtleTogIjEiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImEtaWNvbiIsIHsgYXR0cnM6IHsgdHlwZTogImRlbGV0ZSIgfSB9KSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5Yig6ZmkIikKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEtbWVudS1pdGVtIiwKICAgICAgICAgICAgICAgICAgICB7IGtleTogIjIiIH0sCiAgICAgICAgICAgICAgICAgICAgW19jKCJhLWljb24iLCB7IGF0dHJzOiB7IHR5cGU6ICJsb2NrIiB9IH0pLCBfdm0uX3YoIumUgeWumiIpXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICI4cHgiIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiDmm7TlpJogIiksIF9jKCJhLWljb24iLCB7IGF0dHJzOiB7IHR5cGU6ICJkb3duIiB9IH0pXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEtc3BpbiIsCiAgICAgICAgeyBhdHRyczogeyBzcGlubmluZzogX3ZtLmxvYWRpbmcgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJhLWljb24iLCB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjRweCIgfSwKICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogImluZGljYXRvciIsIHR5cGU6ICJsb2FkaW5nIiwgc3BpbjogIiIgfSwKICAgICAgICAgICAgc2xvdDogImluZGljYXRvciIKICAgICAgICAgIH0pLAogICAgICAgICAgX2MoInRhYmxlIiwgeyByZWY6ICJkaXJlY3RvcnkiLCBzdGF0aWNDbGFzczogImRpcmVjdG9yeSIgfSwgWwogICAgICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJ0aCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJkaXJlY3RvcnktY2VsbCBkaXJlY3RvcnktaGVhZC1jZWxsIiB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCLlkI3np7AiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInRoIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImRpcmVjdG9yeS1jZWxsIGRpcmVjdG9yeS1oZWFkLWNlbGwiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuWkp+WwjyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAidGgiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZGlyZWN0b3J5LWNlbGwgZGlyZWN0b3J5LWhlYWQtY2VsbCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigi5pel5pyfIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ0Ym9keSIsCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5sb2NhbERhdGFTb3VyY2UsIGZ1bmN0aW9uKGRhdGEsIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICJ0ciIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGRhdGEua2V5LAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGFjdGl2ZTogZGF0YS5hY3RpdmUgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnJvd0NsaWNrKGRhdGEsIGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGRibGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5yb3dEYmxjbGljayhkYXRhKQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRtZW51OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jb250ZXh0bWVudShkYXRhLCAkZXZlbnQpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNDbGFzczogImRpcmVjdG9yeS1jZWxsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZmlsZS1pY29uIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IF92bS5maWxlSWNvbihkYXRhLm1lZGlhVHlwZSkgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmaWxlLW5hbWUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhkYXRhLm5hbWUpKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY0NsYXNzOiAiZGlyZWN0b3J5LWNlbGwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLl9mKCJmaWxlU2l6ZUZvcm1hdCIpKGRhdGEuc2l6ZSkpKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljQ2xhc3M6ICJkaXJlY3RvcnktY2VsbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uX2YoIm1vbWVudCIpKGRhdGEuY3JlYXRlVGltZSkpKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJhLW1vZGFsIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICB0aXRsZTogIuS4iuS8oOmZhOS7tiIsCiAgICAgICAgICAgIGZvb3RlcjogbnVsbCwKICAgICAgICAgICAgYWZ0ZXJDbG9zZTogX3ZtLm9uVXBsb2FkQ2xvc2UsCiAgICAgICAgICAgIGRlc3Ryb3lPbkNsb3NlOiAiIgogICAgICAgICAgfSwKICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgIHZhbHVlOiBfdm0udXBsb2FkVmlzaWJsZSwKICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgIF92bS51cGxvYWRWaXNpYmxlID0gJCR2CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJ1cGxvYWRWaXNpYmxlIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoIkZpbGVQb25kVXBsb2FkIiwgewogICAgICAgICAgICByZWY6ICJ1cGxvYWQiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHBhdGg6IF92bS5wYXRocy5qb2luKCIvIiksCiAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlcjogX3ZtLnVwbG9hZEhhbmRsZXIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEtbW9kYWwiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHRpdGxlOiAi6YeN5ZG95ZCN5paH5Lu25aS5IiwKICAgICAgICAgICAgdmlzaWJsZTogX3ZtLnJlbmFtZVZpc2libGUsCiAgICAgICAgICAgIGNvbmZpcm1Mb2FkaW5nOiBfdm0ucmVuYW1lTG9hZGluZwogICAgICAgICAgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIG9rOiBfdm0uaGFuZGxlUmVuYW1lLAogICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIF92bS5yZW5hbWVWaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLnJlbmFtZVZpc2libGUKICAgICAgICAgICAgPyBfYygiYS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNpemU6ICJsYXJnZSIsIHBsYWNlaG9sZGVyOiAi5paH5Lu25ZCN56ewIiB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jYWNoZVJlY29yZC5uYW1lLAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmNhY2hlUmVjb3JkLCAibmFtZSIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNhY2hlUmVjb3JkLm5hbWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uc2VsZWN0QXR0YWNobWVudAogICAgICAgID8gX2MoIkF0dGFjaG1lbnRQcmV2aWV3IiwgewogICAgICAgICAgICByZWY6ICJhdHRhY2htZW50UHJldmlldyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGF0dGFjaG1lbnQ6IF92bS5zZWxlY3RBdHRhY2htZW50IH0KICAgICAgICAgIH0pCiAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgX2MoCiAgICAgICAgInYtY29udGV4dG1lbnUiLAogICAgICAgIHsgcmVmOiAiY29udGV4dG1lbnUiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWNvbnRleHRtZW51LWl0ZW0iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgOyhfdm0ucmVuYW1lVmlzaWJsZSA9IHRydWUpLCAoX3ZtLmNhY2hlUmVjb3JkID0ge30pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCLmlrDlu7rmlofku7blpLkiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29udGV4dG1lbnUtaXRlbSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0ucmVuYW1lVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIumHjeWRveWQjSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ2LWNvbnRleHRtZW51LWl0ZW0iLCB7IG9uOiB7IGNsaWNrOiBfdm0uaGFuZGxlRGVsZXRlIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIuWIoOmZpCIpCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}