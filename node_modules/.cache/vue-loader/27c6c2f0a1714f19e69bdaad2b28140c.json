{"remainingRequest":"F:\\个人git项目\\couldr-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\个人git项目\\couldr-admin\\src\\components\\Charts\\TagCloud.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\个人git项目\\couldr-admin\\src\\components\\Charts\\TagCloud.vue","mtime":1583417156379},{"path":"F:\\个人git项目\\couldr-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\couldr-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\个人git项目\\couldr-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\couldr-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyByZWdpc3RlclNoYXBlIH0gZnJvbSAndmlzZXItdnVlJw0KY29uc3QgRGF0YVNldCA9IHJlcXVpcmUoJ0BhbnR2L2RhdGEtc2V0JykNCg0KY29uc3QgaW1nVXJsID0gJ2h0dHBzOi8vZ3cuYWxpcGF5b2JqZWN0cy5jb20vem9zL3Jtc3BvcnRhbC9nV3llR0xDZEZGUmF2QkdJRHpXay5wbmcnDQoNCmNvbnN0IHNjYWxlID0gWw0KICB7IGRhdGFLZXk6ICd4JywgbmljZTogZmFsc2UgfSwNCiAgeyBkYXRhS2V5OiAneScsIG5pY2U6IGZhbHNlIH0NCl0NCg0KcmVnaXN0ZXJTaGFwZSgncG9pbnQnLCAnY2xvdWQnLCB7DQogIGRyYXcgKGNmZywgY29udGFpbmVyKSB7DQogICAgcmV0dXJuIGNvbnRhaW5lci5hZGRTaGFwZSgndGV4dCcsIHsNCiAgICAgIGF0dHJzOiB7DQogICAgICAgIGZpbGxPcGFjaXR5OiBjZmcub3BhY2l0eSwNCiAgICAgICAgZm9udFNpemU6IGNmZy5vcmlnaW4uX29yaWdpbi5zaXplLA0KICAgICAgICByb3RhdGU6IGNmZy5vcmlnaW4uX29yaWdpbi5yb3RhdGUsDQogICAgICAgIHRleHQ6IGNmZy5vcmlnaW4uX29yaWdpbi50ZXh0LA0KICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLA0KICAgICAgICBmb250RmFtaWx5OiBjZmcub3JpZ2luLl9vcmlnaW4uZm9udCwNCiAgICAgICAgZmlsbDogY2ZnLmNvbG9yLA0KICAgICAgICB0ZXh0QmFzZWxpbmU6ICdBbHBoYWJldGljJywNCiAgICAgICAgLi4uY2ZnLnN0eWxlLA0KICAgICAgICB4OiBjZmcueCwNCiAgICAgICAgeTogY2ZnLnkNCiAgICAgIH0NCiAgICB9KQ0KICB9DQp9KQ0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdUYWdDbG91ZCcsDQogIHByb3BzOiB7DQogICAgdGFnTGlzdDogew0KICAgICAgdHlwZTogQXJyYXksDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0sDQogICAgaGVpZ2h0OiB7DQogICAgICB0eXBlOiBOdW1iZXIsDQogICAgICBkZWZhdWx0OiA0MDANCiAgICB9LA0KICAgIHdpZHRoOiB7DQogICAgICB0eXBlOiBOdW1iZXIsDQogICAgICBkZWZhdWx0OiA2NDANCiAgICB9DQogIH0sDQogIGRhdGEgKCkgew0KICAgIHJldHVybiB7DQogICAgICBkYXRhOiBbXSwNCiAgICAgIHNjYWxlDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIHRhZ0xpc3Q6IGZ1bmN0aW9uICh2YWwpIHsNCiAgICAgIGlmICh2YWwubGVuZ3RoID4gMCkgew0KICAgICAgICB0aGlzLmluaXRUYWdDbG91ZCh2YWwpDQogICAgICB9DQogICAgfQ0KICB9LA0KICBtb3VudGVkICgpIHsNCiAgICBpZiAodGhpcy50YWdMaXN0Lmxlbmd0aCA+IDApIHsNCiAgICAgIHRoaXMuaW5pdFRhZ0Nsb3VkKHRoaXMudGFnTGlzdCkNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBpbml0VGFnQ2xvdWQgKGRhdGFTb3VyY2UpIHsNCiAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gdGhpcw0KDQogICAgICBjb25zdCBkdiA9IG5ldyBEYXRhU2V0LlZpZXcoKS5zb3VyY2UoZGF0YVNvdXJjZSkNCiAgICAgIGNvbnN0IHJhbmdlID0gZHYucmFuZ2UoJ3ZhbHVlJykNCiAgICAgIGNvbnN0IG1pbiA9IHJhbmdlWzBdDQogICAgICBjb25zdCBtYXggPSByYW5nZVsxXQ0KICAgICAgY29uc3QgaW1hZ2VNYXNrID0gbmV3IEltYWdlKCkNCiAgICAgIGltYWdlTWFzay5jcm9zc09yaWdpbiA9ICcnDQogICAgICBpbWFnZU1hc2suc3JjID0gaW1nVXJsDQogICAgICBpbWFnZU1hc2sub25sb2FkID0gKCkgPT4gew0KICAgICAgICBkdi50cmFuc2Zvcm0oew0KICAgICAgICAgIHR5cGU6ICd0YWctY2xvdWQnLA0KICAgICAgICAgIGZpZWxkczogWyduYW1lJywgJ3ZhbHVlJ10sDQogICAgICAgICAgc2l6ZTogW3dpZHRoLCBoZWlnaHRdLA0KICAgICAgICAgIGltYWdlTWFzaywNCiAgICAgICAgICBmb250OiAnVmVyZGFuYScsDQogICAgICAgICAgcGFkZGluZzogMCwNCiAgICAgICAgICB0aW1lSW50ZXJ2YWw6IDUwMDAsIC8vIG1heCBleGVjdXRlIHRpbWUNCiAgICAgICAgICByb3RhdGUgKCkgew0KICAgICAgICAgICAgbGV0IHJhbmRvbSA9IH5+KE1hdGgucmFuZG9tKCkgKiA0KSAlIDQNCiAgICAgICAgICAgIGlmIChyYW5kb20gPT09IDIpIHsNCiAgICAgICAgICAgICAgcmFuZG9tID0gMA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHJhbmRvbSAqIDkwIC8vIDAsIDkwLCAyNzANCiAgICAgICAgICB9LA0KICAgICAgICAgIGZvbnRTaXplIChkKSB7DQogICAgICAgICAgICBpZiAoZC52YWx1ZSkgew0KICAgICAgICAgICAgICByZXR1cm4gKChkLnZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSAqICgzMiAtIDgpICsgOA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIDANCiAgICAgICAgICB9DQogICAgICAgIH0pDQogICAgICAgIHRoaXMuZGF0YSA9IGR2LnJvd3MNCiAgICAgIH0NCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["TagCloud.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TagCloud.vue","sourceRoot":"src/components/Charts","sourcesContent":["<template>\r\n  <v-chart :width=\"width\" :height=\"height\" :padding=\"[0]\" :data=\"data\" :scale=\"scale\">\r\n    <v-tooltip :show-title=\"false\" />\r\n    <v-coord type=\"rect\" direction=\"TL\" />\r\n    <v-point position=\"x*y\" color=\"category\" shape=\"cloud\" tooltip=\"value*category\" />\r\n  </v-chart>\r\n</template>\r\n\r\n<script>\r\nimport { registerShape } from 'viser-vue'\r\nconst DataSet = require('@antv/data-set')\r\n\r\nconst imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png'\r\n\r\nconst scale = [\r\n  { dataKey: 'x', nice: false },\r\n  { dataKey: 'y', nice: false }\r\n]\r\n\r\nregisterShape('point', 'cloud', {\r\n  draw (cfg, container) {\r\n    return container.addShape('text', {\r\n      attrs: {\r\n        fillOpacity: cfg.opacity,\r\n        fontSize: cfg.origin._origin.size,\r\n        rotate: cfg.origin._origin.rotate,\r\n        text: cfg.origin._origin.text,\r\n        textAlign: 'center',\r\n        fontFamily: cfg.origin._origin.font,\r\n        fill: cfg.color,\r\n        textBaseline: 'Alphabetic',\r\n        ...cfg.style,\r\n        x: cfg.x,\r\n        y: cfg.y\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nexport default {\r\n  name: 'TagCloud',\r\n  props: {\r\n    tagList: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 400\r\n    },\r\n    width: {\r\n      type: Number,\r\n      default: 640\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      data: [],\r\n      scale\r\n    }\r\n  },\r\n  watch: {\r\n    tagList: function (val) {\r\n      if (val.length > 0) {\r\n        this.initTagCloud(val)\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    if (this.tagList.length > 0) {\r\n      this.initTagCloud(this.tagList)\r\n    }\r\n  },\r\n  methods: {\r\n    initTagCloud (dataSource) {\r\n      const { height, width } = this\r\n\r\n      const dv = new DataSet.View().source(dataSource)\r\n      const range = dv.range('value')\r\n      const min = range[0]\r\n      const max = range[1]\r\n      const imageMask = new Image()\r\n      imageMask.crossOrigin = ''\r\n      imageMask.src = imgUrl\r\n      imageMask.onload = () => {\r\n        dv.transform({\r\n          type: 'tag-cloud',\r\n          fields: ['name', 'value'],\r\n          size: [width, height],\r\n          imageMask,\r\n          font: 'Verdana',\r\n          padding: 0,\r\n          timeInterval: 5000, // max execute time\r\n          rotate () {\r\n            let random = ~~(Math.random() * 4) % 4\r\n            if (random === 2) {\r\n              random = 0\r\n            }\r\n            return random * 90 // 0, 90, 270\r\n          },\r\n          fontSize (d) {\r\n            if (d.value) {\r\n              return ((d.value - min) / (max - min)) * (32 - 8) + 8\r\n            }\r\n            return 0\r\n          }\r\n        })\r\n        this.data = dv.rows\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}