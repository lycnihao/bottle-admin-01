{"remainingRequest":"F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\个人git项目\\squirrel-admin\\src\\components\\Upload\\FilePondUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\个人git项目\\squirrel-admin\\src\\components\\Upload\\FilePondUpload.vue","mtime":1586351603500},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\个人git项目\\squirrel-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnDQoNCmltcG9ydCB2dWVGaWxlUG9uZCBmcm9tICd2dWUtZmlsZXBvbmQnDQppbXBvcnQgJ2ZpbGVwb25kL2Rpc3QvZmlsZXBvbmQubWluLmNzcycNCg0KLy8gUGx1Z2lucw0KaW1wb3J0IEZpbGVQb25kUGx1Z2luSW1hZ2VQcmV2aWV3IGZyb20gJ2ZpbGVwb25kLXBsdWdpbi1pbWFnZS1wcmV2aWV3Jw0KaW1wb3J0ICdmaWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy9kaXN0L2ZpbGVwb25kLXBsdWdpbi1pbWFnZS1wcmV2aWV3Lm1pbi5jc3MnDQoNCi8vIENyZWF0ZSBjb21wb25lbnQgYW5kIHJlZ2lzdCBwbHVnaW5zDQpjb25zdCBGaWxlUG9uZCA9IHZ1ZUZpbGVQb25kKEZpbGVQb25kUGx1Z2luSW1hZ2VQcmV2aWV3KQ0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAnRmlsZVBvbmRVcGxvYWQnLA0KICBjb21wb25lbnRzOiB7DQogICAgRmlsZVBvbmQNCiAgfSwNCiAgcHJvcHM6IHsNCiAgICBuYW1lOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogZmFsc2UsDQogICAgICBkZWZhdWx0OiAnZmlsZScNCiAgICB9LA0KICAgIGZpbGVkOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogZmFsc2UsDQogICAgICBkZWZhdWx0OiAnJw0KICAgIH0sDQogICAgbXVsdGlwbGU6IHsNCiAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICByZXF1aXJlZDogZmFsc2UsDQogICAgICBkZWZhdWx0OiB0cnVlDQogICAgfSwNCiAgICBhY2NlcHQ6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwNCiAgICAgIGRlZmF1bHQ6ICcnDQogICAgfSwNCiAgICBsYWJlbDogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgcmVxdWlyZWQ6IGZhbHNlLA0KICAgICAgZGVmYXVsdDogJ+eCueWHu+mAieaLqeaWh+S7tuaIluWwhuaWh+S7tuaLluaLveWIsOatpOWkhCcNCiAgICB9LA0KICAgIHVwbG9hZEhhbmRsZXI6IHsNCiAgICAgIHR5cGU6IEZ1bmN0aW9uLA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICB9LA0KCQlwYXRoOiB7DQoJCSAgdHlwZTogU3RyaW5nLA0KCQkgIHJlcXVpcmVkOiBmYWxzZSwNCgkJICBkZWZhdWx0OiAncm9vdCcNCgkJfQ0KICB9LA0KICBkYXRhOiBmdW5jdGlvbigpIHsNCiAgICByZXR1cm4gew0KICAgICAgc2VydmVyOiB7DQogICAgICAgIHByb2Nlc3M6IChmaWVsZE5hbWUsIGZpbGUsIG1ldGFkYXRhLCBsb2FkLCBlcnJvciwgcHJvZ3Jlc3MsIGFib3J0KSA9PiB7DQogICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKQ0KCQkJCQlmb3JtRGF0YS5hcHBlbmQoJ3BhdGgnLCB0aGlzLnBhdGgpDQogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKGZpZWxkTmFtZSwgZmlsZSwgZmlsZS5uYW1lKQ0KICAgICAgICAgIGNvbnN0IENhbmNlbFRva2VuID0gYXhpb3MuQ2FuY2VsVG9rZW4NCiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBDYW5jZWxUb2tlbi5zb3VyY2UoKQ0KICAgICAgICAgIHRoaXMudXBsb2FkSGFuZGxlcigNCiAgICAgICAgICAgIGZvcm1EYXRhLA0KICAgICAgICAgICAgcHJvZ3Jlc3NFdmVudCA9PiB7DQogICAgICAgICAgICAgIGlmIChwcm9ncmVzc0V2ZW50LnRvdGFsID4gMCkgew0KICAgICAgICAgICAgICAgIHByb2dyZXNzKHByb2dyZXNzRXZlbnQubGVuZ3RoQ29tcHV0YWJsZSwgcHJvZ3Jlc3NFdmVudC5sb2FkZWQsIHByb2dyZXNzRXZlbnQudG90YWwpDQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBzb3VyY2UudG9rZW4sDQogICAgICAgICAgICB0aGlzLmZpbGVkLA0KICAgICAgICAgICAgZmlsZQ0KICAgICAgICAgICkNCiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsNCgkJCQkJCQljb25zb2xlLmxvZygndGhlbicpDQogICAgICAgICAgICAgIGxvYWQocmVzcG9uc2UpDQogICAgICAgICAgICAgIC8qIHRoaXMuJGxvZy5kZWJ1ZygnVXBsb2FkZWQgc3VjY2Vzc2Z1bGx5JywgcmVzcG9uc2UpICovDQoJCQkJCQkJY29uc29sZS5sb2coJ1VwbG9hZGVkIHN1Y2Nlc3NmdWxseScgKyByZXNwb25zZSkNCiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc3VjY2VzcycsIHJlc3BvbnNlLCBmaWxlKQ0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIC5jYXRjaChmYWlsdXJlID0+IHsNCiAgICAgICAgICAgICAgLyogdGhpcy4kbG9nLmRlYnVnKCdGYWlsZWQgdG8gdXBsb2FkIGZpbGUnLCBmYWlsdXJlKSAqLw0KCQkJCQkJCWNvbnNvbGUubG9nKCdGYWlsZWQgdG8gdXBsb2FkIGZpbGUnICsgZmFpbHVyZSkNCiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnZmFpbHVyZScsIGZhaWx1cmUsIGZpbGUpDQogICAgICAgICAgICAgIGVycm9yKCkNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgIGFib3J0OiAoKSA9PiB7DQogICAgICAgICAgICAgIGFib3J0KCkNCiAgICAgICAgICAgICAgLyogdGhpcy4kbG9nLmRlYnVnKCdVcGxvYWQgb3BlcmF0aW9uIGFib3J0ZWQgYnkgdGhlIHVzZXInKSAqLw0KCQkJCQkJCWNvbnNvbGUubG9nKCdVcGxvYWQgb3BlcmF0aW9uIGFib3J0ZWQgYnkgdGhlIHVzZXInKQ0KICAgICAgICAgICAgICBzb3VyY2UuY2FuY2VsKCdVcGxvYWQgb3BlcmF0aW9uIGNhbmNlbGVkIGJ5IHRoZSB1c2VyLicpDQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgZmlsZUxpc3Q6IFtdLA0KCQkJYXR0YWNobWVudF91cGxvYWRfbWF4X3BhcmFsbGVsX3VwbG9hZHM6ICcnLA0KCQkJYXR0YWNobWVudF91cGxvYWRfaW1hZ2VfcHJldmlld19lbmFibGU6ICcnLA0KCQkJYXR0YWNobWVudF91cGxvYWRfbWF4X2ZpbGVzOiBudWxsDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgaGFuZGxlRmlsZVBvbmRJbml0KCkgew0KICAgICAgLyogdGhpcy4kbG9nLmRlYnVnKCdGaWxlUG9uZCBoYXMgaW5pdGlhbGl6ZWQnKSAqLw0KCQkJY29uc29sZS5sb2coJ0ZpbGVQb25kIGhhcyBpbml0aWFsaXplZCcpDQogICAgfSwNCiAgICBoYW5kbGVDbGVhckZpbGVMaXN0KCkgew0KICAgICAgdGhpcy4kcmVmcy5wb25kLnJlbW92ZUZpbGVzKCkNCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["FilePondUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FilePondUpload.vue","sourceRoot":"src/components/Upload","sourcesContent":["<template>\r\n  <div>\r\n    <file-pond\r\n      ref=\"pond\"\r\n      :label-idle=\"label\"\r\n      :name=\"name\"\r\n      :allow-multiple=\"multiple\"\r\n      :allowRevert=\"false\"\r\n      :accepted-file-types=\"accept\"\r\n      :maxParallelUploads=\"attachment_upload_max_parallel_uploads\"\r\n      :allowImagePreview=\"attachment_upload_image_preview_enable\"\r\n      :maxFiles=\"attachment_upload_max_files\"\r\n      labelFileProcessing=\"上传中\"\r\n      labelFileProcessingComplete=\"上传完成\"\r\n      labelFileProcessingAborted=\"取消上传\"\r\n      labelFileProcessingError=\"上传错误\"\r\n      labelTapToCancel=\"点击取消\"\r\n      labelTapToRetry=\"点击重试\"\r\n      :files=\"fileList\"\r\n      :server=\"server\"\r\n      @init=\"handleFilePondInit\"\r\n    >\r\n    </file-pond>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\n\r\nimport vueFilePond from 'vue-filepond'\r\nimport 'filepond/dist/filepond.min.css'\r\n\r\n// Plugins\r\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview'\r\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css'\r\n\r\n// Create component and regist plugins\r\nconst FilePond = vueFilePond(FilePondPluginImagePreview)\r\nexport default {\r\n  name: 'FilePondUpload',\r\n  components: {\r\n    FilePond\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: false,\r\n      default: 'file'\r\n    },\r\n    filed: {\r\n      type: String,\r\n      required: false,\r\n      default: ''\r\n    },\r\n    multiple: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    accept: {\r\n      type: String,\r\n      required: false,\r\n      default: ''\r\n    },\r\n    label: {\r\n      type: String,\r\n      required: false,\r\n      default: '点击选择文件或将文件拖拽到此处'\r\n    },\r\n    uploadHandler: {\r\n      type: Function,\r\n      required: true\r\n    },\r\n\t\tpath: {\r\n\t\t  type: String,\r\n\t\t  required: false,\r\n\t\t  default: 'root'\r\n\t\t}\r\n  },\r\n  data: function() {\r\n    return {\r\n      server: {\r\n        process: (fieldName, file, metadata, load, error, progress, abort) => {\r\n          const formData = new FormData()\r\n\t\t\t\t\tformData.append('path', this.path)\r\n          formData.append(fieldName, file, file.name)\r\n          const CancelToken = axios.CancelToken\r\n          const source = CancelToken.source()\r\n          this.uploadHandler(\r\n            formData,\r\n            progressEvent => {\r\n              if (progressEvent.total > 0) {\r\n                progress(progressEvent.lengthComputable, progressEvent.loaded, progressEvent.total)\r\n              }\r\n            },\r\n            source.token,\r\n            this.filed,\r\n            file\r\n          )\r\n            .then(response => {\r\n\t\t\t\t\t\t\tconsole.log('then')\r\n              load(response)\r\n              /* this.$log.debug('Uploaded successfully', response) */\r\n\t\t\t\t\t\t\tconsole.log('Uploaded successfully' + response)\r\n              this.$emit('success', response, file)\r\n            })\r\n            .catch(failure => {\r\n              /* this.$log.debug('Failed to upload file', failure) */\r\n\t\t\t\t\t\t\tconsole.log('Failed to upload file' + failure)\r\n              this.$emit('failure', failure, file)\r\n              error()\r\n            })\r\n          return {\r\n            abort: () => {\r\n              abort()\r\n              /* this.$log.debug('Upload operation aborted by the user') */\r\n\t\t\t\t\t\t\tconsole.log('Upload operation aborted by the user')\r\n              source.cancel('Upload operation canceled by the user.')\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fileList: [],\r\n\t\t\tattachment_upload_max_parallel_uploads: '',\r\n\t\t\tattachment_upload_image_preview_enable: '',\r\n\t\t\tattachment_upload_max_files: null\r\n    }\r\n  },\r\n  methods: {\r\n    handleFilePondInit() {\r\n      /* this.$log.debug('FilePond has initialized') */\r\n\t\t\tconsole.log('FilePond has initialized')\r\n    },\r\n    handleClearFileList() {\r\n      this.$refs.pond.removeFiles()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n</style>\r\n"]}]}